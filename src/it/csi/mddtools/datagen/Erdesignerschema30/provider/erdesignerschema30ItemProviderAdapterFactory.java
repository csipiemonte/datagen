/**
 * <copyright>
 * (C) Copyright 2011 CSI-PIEMONTE;

 * Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;
 * Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.
 * E' possibile ottenere una copia della Licenza al seguente indirizzo:
 *
 * http://www.eupl.it/opensource/eupl-1-1
 *
 * Salvo diversamente indicato dalla legge applicabile o concordato per 
 * iscritto, il software distribuito secondo i termini della Licenza e' 
 * distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,
 * esplicite o implicite.
 * Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni
 * e le limitazioni secondo i termini della Licenza.
 * </copyright>
 *
 * $Id$
 */
package it.csi.mddtools.datagen.Erdesignerschema30.provider;

import it.csi.mddtools.datagen.Erdesignerschema30.util.erdesignerschema30AdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class erdesignerschema30ItemProviderAdapterFactory extends erdesignerschema30AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public erdesignerschema30ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.AttributeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeTypeItemProvider attributeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.AttributeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeTypeAdapter() {
		if (attributeTypeItemProvider == null) {
			attributeTypeItemProvider = new AttributeTypeItemProvider(this);
		}

		return attributeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.CommentsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommentsTypeItemProvider commentsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.CommentsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommentsTypeAdapter() {
		if (commentsTypeItemProvider == null) {
			commentsTypeItemProvider = new CommentsTypeItemProvider(this);
		}

		return commentsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.ConfigurationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationTypeItemProvider configurationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.ConfigurationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationTypeAdapter() {
		if (configurationTypeItemProvider == null) {
			configurationTypeItemProvider = new ConfigurationTypeItemProvider(this);
		}

		return configurationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.DomainsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainsTypeItemProvider domainsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.DomainsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainsTypeAdapter() {
		if (domainsTypeItemProvider == null) {
			domainsTypeItemProvider = new DomainsTypeItemProvider(this);
		}

		return domainsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.DomainType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainTypeItemProvider domainTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.DomainType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainTypeAdapter() {
		if (domainTypeItemProvider == null) {
			domainTypeItemProvider = new DomainTypeItemProvider(this);
		}

		return domainTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.IndexattributeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexattributeTypeItemProvider indexattributeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.IndexattributeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexattributeTypeAdapter() {
		if (indexattributeTypeItemProvider == null) {
			indexattributeTypeItemProvider = new IndexattributeTypeItemProvider(this);
		}

		return indexattributeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.IndexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IndexTypeItemProvider indexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.IndexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIndexTypeAdapter() {
		if (indexTypeItemProvider == null) {
			indexTypeItemProvider = new IndexTypeItemProvider(this);
		}

		return indexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.ItemType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ItemTypeItemProvider itemTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.ItemType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createItemTypeAdapter() {
		if (itemTypeItemProvider == null) {
			itemTypeItemProvider = new ItemTypeItemProvider(this);
		}

		return itemTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.MappingType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MappingTypeItemProvider mappingTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.MappingType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMappingTypeAdapter() {
		if (mappingTypeItemProvider == null) {
			mappingTypeItemProvider = new MappingTypeItemProvider(this);
		}

		return mappingTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.ModelCommentType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelCommentTypeItemProvider modelCommentTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.ModelCommentType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelCommentTypeAdapter() {
		if (modelCommentTypeItemProvider == null) {
			modelCommentTypeItemProvider = new ModelCommentTypeItemProvider(this);
		}

		return modelCommentTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.ModelType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelTypeItemProvider modelTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.ModelType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelTypeAdapter() {
		if (modelTypeItemProvider == null) {
			modelTypeItemProvider = new ModelTypeItemProvider(this);
		}

		return modelTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.PropertyType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyTypeItemProvider propertyTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.PropertyType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyTypeAdapter() {
		if (propertyTypeItemProvider == null) {
			propertyTypeItemProvider = new PropertyTypeItemProvider(this);
		}

		return propertyTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.RelationsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationsTypeItemProvider relationsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.RelationsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationsTypeAdapter() {
		if (relationsTypeItemProvider == null) {
			relationsTypeItemProvider = new RelationsTypeItemProvider(this);
		}

		return relationsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.RelationType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationTypeItemProvider relationTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.RelationType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationTypeAdapter() {
		if (relationTypeItemProvider == null) {
			relationTypeItemProvider = new RelationTypeItemProvider(this);
		}

		return relationTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.SubjectareasType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubjectareasTypeItemProvider subjectareasTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.SubjectareasType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubjectareasTypeAdapter() {
		if (subjectareasTypeItemProvider == null) {
			subjectareasTypeItemProvider = new SubjectareasTypeItemProvider(this);
		}

		return subjectareasTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.SubjectareaType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubjectareaTypeItemProvider subjectareaTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.SubjectareaType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubjectareaTypeAdapter() {
		if (subjectareaTypeItemProvider == null) {
			subjectareaTypeItemProvider = new SubjectareaTypeItemProvider(this);
		}

		return subjectareaTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.TablesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TablesTypeItemProvider tablesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.TablesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTablesTypeAdapter() {
		if (tablesTypeItemProvider == null) {
			tablesTypeItemProvider = new TablesTypeItemProvider(this);
		}

		return tablesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.TableType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableTypeItemProvider tableTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.TableType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableTypeAdapter() {
		if (tableTypeItemProvider == null) {
			tableTypeItemProvider = new TableTypeItemProvider(this);
		}

		return tableTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.ViewsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewsTypeItemProvider viewsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.ViewsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewsTypeAdapter() {
		if (viewsTypeItemProvider == null) {
			viewsTypeItemProvider = new ViewsTypeItemProvider(this);
		}

		return viewsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link it.csi.mddtools.datagen.Erdesignerschema30.ViewType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ViewTypeItemProvider viewTypeItemProvider;

	/**
	 * This creates an adapter for a {@link it.csi.mddtools.datagen.Erdesignerschema30.ViewType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createViewTypeAdapter() {
		if (viewTypeItemProvider == null) {
			viewTypeItemProvider = new ViewTypeItemProvider(this);
		}

		return viewTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (attributeTypeItemProvider != null) attributeTypeItemProvider.dispose();
		if (commentsTypeItemProvider != null) commentsTypeItemProvider.dispose();
		if (configurationTypeItemProvider != null) configurationTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (domainsTypeItemProvider != null) domainsTypeItemProvider.dispose();
		if (domainTypeItemProvider != null) domainTypeItemProvider.dispose();
		if (indexattributeTypeItemProvider != null) indexattributeTypeItemProvider.dispose();
		if (indexTypeItemProvider != null) indexTypeItemProvider.dispose();
		if (itemTypeItemProvider != null) itemTypeItemProvider.dispose();
		if (mappingTypeItemProvider != null) mappingTypeItemProvider.dispose();
		if (modelCommentTypeItemProvider != null) modelCommentTypeItemProvider.dispose();
		if (modelTypeItemProvider != null) modelTypeItemProvider.dispose();
		if (propertyTypeItemProvider != null) propertyTypeItemProvider.dispose();
		if (relationsTypeItemProvider != null) relationsTypeItemProvider.dispose();
		if (relationTypeItemProvider != null) relationTypeItemProvider.dispose();
		if (subjectareasTypeItemProvider != null) subjectareasTypeItemProvider.dispose();
		if (subjectareaTypeItemProvider != null) subjectareaTypeItemProvider.dispose();
		if (tablesTypeItemProvider != null) tablesTypeItemProvider.dispose();
		if (tableTypeItemProvider != null) tableTypeItemProvider.dispose();
		if (viewsTypeItemProvider != null) viewsTypeItemProvider.dispose();
		if (viewTypeItemProvider != null) viewTypeItemProvider.dispose();
	}

}
