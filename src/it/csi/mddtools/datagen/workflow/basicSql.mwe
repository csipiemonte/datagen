<?xml version="1.0"?>
<!--
Parametri:
 - dbTargetProjectName:
   - nome del progetto dove generare il componente DB
   - default: no

-->
<workflow>

	<!-- valorizzare con il nome del progetto eclipse target dove verranno
	     generati gli artefatti. Corrisponde la nome del progetto SVN relativo
	     al componente SW -->
	<property name="src-gen-db"  value="../${dbTargetProjectName}" />

	<!-- set up EMF for standalone execution -->
	<bean class="org.eclipse.emf.mwe.utils.StandaloneSetup" >
		<platformUri value=".." />
		<registerGeneratedEPackage value="it.csi.mddtools.datagen.DatagenPackage"/>
		<registerGeneratedEPackage value="it.csi.mddtools.rdbmdl.RdbmdlPackage"/>
	</bean>

	<!-- Clean de build directory -->
	<!--<component class="org.eclipse.emf.mwe.utils.DirectoryCleaner">
		<directory value="${src-gen}/build" />
	</component>-->

	<!-- load model and store it in slot 'model' -->
	<component class="org.eclipse.emf.mwe.utils.Reader">
		<uri value="platform:/resource/${model}" />
		<modelSlot value="model" />
	</component>

	<!-- check model (common checks) -->
	<component class="org.eclipse.xtend.check.CheckComponent">
		<metaModel id="mm"
			class="org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel"/>
		<checkFile value="metamodel::DatagenChecks" />
		<emfAllChildrenSlot value="model" />
	</component>

	<!--  generate code -->
	<component class="org.eclipse.xpand2.Generator" id="mygenerator">
		<metaModel idRef="mm"/>
		<expand
			value="template::datagen::sql::sql::main FOR model" />
		<!--  protected regions configurator -->
	    <prSrcPaths value="${src-gen-db}" />
	    <prDefaultExcludes value="true" />
	    <prExcludes value="*.jar, *.svn-base, .metadata" />
		<outlet path="${src-gen-db}" >
			<postprocessor class="org.eclipse.xpand2.output.JavaBeautifier" />
		</outlet>
	</component>

</workflow>