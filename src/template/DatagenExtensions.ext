import ecore;
import datagen;
import rdbmdl;
import rdbmdl::datatypes;

String javaSrcRoot() :
	"src/java";

String sqlSrcRoot() :
	"src/sql";

/// SQL
String getSchemaCreationSQLPath(Schema sch) :
	"createSchema_"+sch.name+".sql";

String getSchemaDropSQLPath(Schema sch) :
	"dropSchema_"+sch.name+".sql";
	
String getDALayerBasePkg(DBAccessModel model) :
	(!isNullOrEmpty(getProperty("basePackage"))?getProperty("basePackage"):
	"it.csi."+model.codProdotto.toLowerCase()+"."+model.codComponente.toLowerCase())
	+".business.dao";
	

String getDALayerBaseDir(DBAccessModel model) :
javaSrcRoot()+"/"+
   (!isNullOrEmpty(getProperty("basePackage")) ? 
   pkg2Path(getProperty("basePackage"))
   :
   "it/csi/"+model.codProdotto.toLowerCase()+"/"+model.codComponente.toLowerCase()
   )
	+"/business/dao";

String getPkgPackage(DaoPackage pkg, DBAccessModel model) :
	getDALayerBasePkg(model)+"."+pkg.name;

String getPkgDir(DaoPackage pkg, DBAccessModel model) :
	getDALayerBaseDir(model)+"/"+pkg.name;
		
// DAO

String getDaoClassName(DataAccessObject dao) :
	dao.name.toFirstUpper()+"Dao";

String getDaoFQN(DataAccessObject dao, DBAccessModel model) :
	getPkgPackage((DaoPackage)(dao.eContainer), model)+".dao."+getDaoClassName(dao);

String getDaoFullPath(DataAccessObject dao, DBAccessModel model) :
	getPkgDir((DaoPackage)(dao.eContainer), model)+"/dao/"+getDaoClassName(dao)+".java";

String getDaoImplClassName(DataAccessObject dao) :
	dao.name.toFirstUpper()+"DaoImpl";

String getDaoImplFQN(DataAccessObject dao, DBAccessModel model) :
	getPkgPackage((DaoPackage)(dao.eContainer), model)+".dao.impl."+getDaoImplClassName(dao);

String getDaoImplFullPath(DataAccessObject dao, DBAccessModel model) :
	getPkgDir((DaoPackage)(dao.eContainer), model)+"/dao/impl/"+getDaoImplClassName(dao)+".java";

String getDaoExcClassName(DataAccessObject dao) :
	dao.name.toFirstUpper()+"DaoException";

String getDaoExcFQN(DataAccessObject dao, DBAccessModel model) :
	getPkgPackage((DaoPackage)(dao.eContainer), model)+".exceptions."+getDaoExcClassName(dao);

String getDaoExcFullPath(DataAccessObject dao, DBAccessModel model) :
	getPkgDir((DaoPackage)(dao.eContainer), model)+"/exceptions/"+getDaoExcClassName(dao)+".java";


// DTO

String getDtoClassName(DataAccessObject dao) :
	dao.name.toFirstUpper()+"Dto";

String getDtoFQN(DataAccessObject dao, DBAccessModel model) :
	getPkgPackage((DaoPackage)(dao.eContainer), model)+".dto."+getDtoClassName(dao);

String getDtoFullPath(DataAccessObject dao, DBAccessModel model) :
	getPkgDir((DaoPackage)(dao.eContainer), model)+"/dto/"+getDtoClassName(dao)+".java";
	
// DTO PK
String getPkClassName(DataAccessObject dao) :
	dao.name.toFirstUpper()+"Pk";

String getPkFQN(DataAccessObject dao, DBAccessModel model) :
	getPkgPackage((DaoPackage)(dao.eContainer), model)+".dto."+getPkClassName(dao);

String getPkFullPath(DataAccessObject dao, DBAccessModel model) :
	getPkgDir((DaoPackage)(dao.eContainer), model)+"/dto/"+getPkClassName(dao)+".java";
	
// QBE

String getQbeExClassName(DataAccessObject dao) :
	dao.name.toFirstUpper()+"Example";

String getQbeExFQN(DataAccessObject dao, DBAccessModel model) :
	getPkgPackage((DaoPackage)(dao.eContainer), model)+".qbe."+getQbeExClassName(dao);

String getQbeExFullPath(DataAccessObject dao, DBAccessModel model) :
	getPkgDir((DaoPackage)(dao.eContainer), model)+"/qbe/"+getQbeExClassName(dao)+".java";
	
//// 

String javaPropertyNameFromColumn(TableColumn col) :
	toJavaId(col.name);

// TODO!!!
String javaPropertyTypeFromColumn(TableColumn col) :
	let code = col.type.type :
	switch(code){
		case PrimitiveTypeCodes::VARCHAR :
			"String"
		case PrimitiveTypeCodes::NUMERIC :
			 (col.type.decimalDigits >0 ?
				"java.lang.Double" :
				"java.lang.Long")
		case PrimitiveTypeCodes::DATE :
			"java.sql.Date"
		case PrimitiveTypeCodes::TIMESTAMP :
			"java.sql.Timestamp"
		case PrimitiveTypeCodes::BLOB : 
			"java.sql.Blob"
		case PrimitiveTypeCodes::CLOB :
			"java.sql.Clob"
		default :"???"
	};
		
String getValueFromRS(TableColumn col, int i) :
	let code = col.type.type :
	switch(code){
		case PrimitiveTypeCodes::VARCHAR :
			"rs.getString("+i+")"
		case PrimitiveTypeCodes::NUMERIC :
			 (col.type.decimalDigits >0 ?
				"new java.lang.Double(rs.getDouble("+i+"))" :
				"new java.lang.Long(rs.getLong("+i+"))")
		case PrimitiveTypeCodes::DATE :
			"rs.getDate("+i+")"
		case PrimitiveTypeCodes::TIMESTAMP :
			"rs.getTimestamp("+i+")"
		case PrimitiveTypeCodes::BLOB : 
			"java.sql.Blob???"
		case PrimitiveTypeCodes::CLOB :
			"java.sql.Clob???"
		default :"???"
	};

String getSQLType(TableColumn col) :
	let code = col.type.type :
	switch(code){
		case PrimitiveTypeCodes::VARCHAR :
			"VARCHAR2("+col.type.size+")"
		case PrimitiveTypeCodes::NUMERIC :
			 "NUMBER("+col.type.size+","+col.type.decimalDigits+")"
		case PrimitiveTypeCodes::DATE :
			"DATE"
		case PrimitiveTypeCodes::TIMESTAMP :
			"TIMESTAMP"
		case PrimitiveTypeCodes::BLOB : 
			"BLOB"
		case PrimitiveTypeCodes::CLOB :
			"CLOB"
		default :"???"
	};
	
String getColumnModifier(TableColumn col) :
	col.type.nullable ? "NULL" : "NOT NULL";

boolean isNullOrEmpty(String s) :
	s==null || s.length==0;

String getRegionUID(String sourceId) : JAVA
	it.csi.mddtools.datagen.genutils.GenUtils.getRegionUID(java.lang.String);

// TODO da rivedere...
String toJavaId(String original) :
	original.toFirstLower();
	
// JAVA 
String pkg2Path(String pkg) : JAVA
	it.csi.mddtools.datagen.genutils.GenUtils.pkg2Path(java.lang.String);

String getProperty(String name) : JAVA
  org.openarchitectureware.util.stdlib.PropertiesExtension.getProperty(java.lang.String);

Void dumpProperties() : JAVA
  it.csi.mddtools.datagen.genutils.GenUtils.dumpProperties();

Void backupProperties() : JAVA
  it.csi.mddtools.datagen.genutils.GenUtils.backupProperties();

Void restoreProperties() : JAVA
  it.csi.mddtools.datagen.genutils.GenUtils.restoreProperties();

Void setProperty(String name, String val) : JAVA
  it.csi.mddtools.datagen.genutils.GenUtils.setProperty(java.lang.String, java.lang.String);