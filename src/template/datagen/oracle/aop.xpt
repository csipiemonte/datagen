«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT datagen»
«IMPORT rdbmdl»
«EXTENSION template::DatagenExtensions»

«AROUND template::datagen::spring::configFiles::localDatasourceSample FOR DBAccessModel»
  <!-- definizione locale di datasource per ORACLE (non usare in un application server!) -->
  <!--<bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
      <property name="url" value="jdbc:oracle:thin:@TST-DB-01.CSI.IT:1522:TEST10B" /> 
    <property name="url" value="jdbc:oracle:thin:@SVIL10A.CSI.IT:1555:SVIL10A" />  
    <property name="username" value="sicee" />
    <property name="password" value="mypass" />
  </bean>-->
«ENDAROUND»

«AROUND template::datagen::dao::daoFiles::abstractDAODBMSSpecificCode FOR DBAccessModel»
	// ORACLE specific code
	
	/**
	 * Metodo specifico del DBMS Oracle per l'aggiornamento del valore di un campo di tipo
	 * CLOB.
	 * @param clob l'oggetto CLOB da aggiornare
	 * @param data il valore da assegnare al CLOB
	 * @throws IOException
	 * @throws SQLException 
	 * @generated
	 */
    public static void updateClob(Clob clob, String data) throws IOException, SQLException 
    {
        if (clob == null || data == null) {
            return;
        }

        Reader reader = new StringReader( data );
         Writer clobWriter = ((oracle.sql.CLOB)clob).setCharacterStream(0L);
        char[] cbuffer = new char[10* 1024];
        int nread = 0;
        while( (nread= reader.read(cbuffer)) != -1 )
          clobWriter.write( cbuffer, 0, nread);
        reader.close();
        clobWriter.close();
    }

	/**
	 * Metodo specifico del DBMS Oracle per l'aggiornamento di una colonna
	 * di tipo BLOB
	 * @param blob l'oggetto BLOB da aggiornare
	 * @param data il valore da assegnare al BLOB
	 * @throws IOException
	 * @throws SQLException
	 * @generated
	 */
    public static void updateBlob(Blob blob, byte[] data) throws IOException, SQLException
    {
        if (blob == null || data == null) {
            return;
        }

        OutputStream os = ((oracle.sql.BLOB)blob).setBinaryStream(0L);
        InputStream is = new ByteArrayInputStream(data);
        byte[] buffer = new byte[10* 1024];
        int nread = 0;
        while( (nread= is.read(buffer)) != -1 ) {
          os.write(buffer, 0, nread);
      }
        is.close();
        os.close();
    }

	/**
	 * Metodo specifico del DBMS Oracle per la lettura di una colonna 
	 * di tipo BLOB.
	 * @param rs il result set d acui leggere i dati del BLOB
	 * @param columnIndex l'indice della colonna (all'interno del result set)
	 *        da cui occorre leggere i dati del BLOB
	 * @throws SQLException 
	 * @generated
	 */
    public static byte[] getBlobColumn(ResultSet rs, int columnIndex)
            throws SQLException
    {
        try {

            int type = rs.getMetaData().getColumnType( columnIndex );
            if (type == Types.LONGVARBINARY) {
                return rs.getBytes( columnIndex );
            }

            Blob blob = rs.getBlob( columnIndex );
            if (blob == null) {
                return null;
            }

            InputStream is = blob.getBinaryStream();
            ByteArrayOutputStream bos = new ByteArrayOutputStream();

            if (is == null) {
                return null;
            }
            else {
                byte buffer[] = new byte[ 64 ];
                int c = is.read( buffer );
                while (c>0) {
                    bos.write( buffer, 0, c );
                    c = is.read( buffer );
                }
                return bos.toByteArray();
            }
        }
        catch (IOException e) { «noSonarTag("JDK COMP")»
            throw new SQLException( «noSonarTag("JDK COMP")»
            	"Failed to read BLOB column due to IOException: " + «noSonarTag("JDK COMP")»
            	 e.getMessage() ); «noSonarTag("JDK COMP")»
        } «noSonarTag("JDK COMP")»
    }

	/**
	 * Metodo specifico del DBMS Oracle per la scrittura di una colonna
	 * di tipo BLOB
	 * @param stmt per scrivere un valore BLOB occorre utilizzare un prepared statement
	 * @param parameterIndex l'indice del parametro del prepared statement in cui dovra'
	 *        essere inserito il valore del BLOB
	 * @param value il valore (bytes) da inserire nella colonna BLOB)
	 * @throws SQLException
	 * @generated
	 */
    public static void setBlobColumn(PreparedStatement stmt, int parameterIndex, byte[] value)
            throws SQLException
    {
        if (value == null) {
            stmt.setNull( parameterIndex, Types.BLOB );
        }
        else {
            stmt.setBinaryStream( parameterIndex, new ByteArrayInputStream(value), value.length );
        }
    }

	/**
	 * Metodo specifico del DBMS Oracle per la lettura di una colonna 
	 * di tipo CLOB.
	 * @param rs il result set da cui leggere i dati del CLOB
	 * @param columnIndex l'indice della colonna (all'interno del result set)
	 *        da cui occorre leggere i dati del CLOB
	 * @throws SQLException
	 * @generated
	 */
    public static String getClobColumn(ResultSet rs, int columnIndex)
        throws SQLException
    {
        try {
            Clob clob = rs.getClob( columnIndex );
            if (clob == null) {
                return null;
            }

            StringBuilder ret = new StringBuilder();
            InputStream is = clob.getAsciiStream();

            if (is == null) {
                return null;
            }
            else {
                byte buffer[] = new byte[ 64 ];
                int c = is.read( buffer );
                while (c>0) {
                    ret.append( new String(buffer, 0, c) );
                    c = is.read( buffer );
                }
                return ret.toString();
            }
        }
        catch (IOException e) { «noSonarTag("JDK COMP")»
            throw new SQLException( «noSonarTag("JDK COMP")»
            	"Failed to read CLOB column due to IOException: " + «noSonarTag("JDK COMP")»
            	 e.getMessage());«noSonarTag("JDK COMP")»
        } «noSonarTag("JDK COMP")»
    }

	/**
	 * Metodo specifico del DBMS Oracle per la gestione della scrittura di una colonna
	 * di tipo CLOB
	 * @param stmt per scrivere un valore CLOB occorre utilizzare un prepared statement
	 * @param parameterIndex l'indice del parametro del prepared statement in cui dovra'
	 *        essere inserito il valore del CLOB
	 * @param value il valore (bytes) da inserire nella colonna CLOB)
	 * @throws SQLException
	 * @generated
	 */
    public static void setClobColumn(PreparedStatement stmt, int parameterIndex, String value)
        throws SQLException
    {
        if (value == null) {
            stmt.setNull( parameterIndex, Types.CLOB );
        }
        else {
            stmt.setAsciiStream( parameterIndex, new ByteArrayInputStream(value.getBytes()), value.length() );
        }
    }
«ENDAROUND»

«AROUND template::datagen::spring::configFiles::pkGeneratorBeanDef(DataAccessObject dao) FOR SequencePKGenerator»
«IF dao.mainTable.primaryKey.includedColumns.size==1-»
	<bean id="«getDaoIdName(dao)»Incrementer"
		class="org.springframework.jdbc.support.incrementer.OracleSequenceMaxValueIncrementer">
		<constructor-arg>
			<ref bean="myDataSource" />
		</constructor-arg>
		<constructor-arg>
			<value>«this.sequenceName»</value>
		</constructor-arg>
	</bean>

«ELSE-»
	«ERROR "impossibile definire un incrementer per la PK di "+dao.name+" perchè non ha una sola colonna"-»
«ENDIF-»

«ENDAROUND»

