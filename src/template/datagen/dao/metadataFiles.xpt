«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT ecore»
«IMPORT datagen»
«IMPORT rdbmdl»
«IMPORT rdbmdl::constraints»
«IMPORT rdbmdl::datatypes»
«IMPORT rdbmdl::view»

«EXTENSION template::DatagenExtensions»

«DEFINE metadataFiles FOR DBAccessModel»
«EXPAND metadataFiles(this) FOREACH daopkgs»
«ENDDEFINE»

«DEFINE metadataFiles (DBAccessModel model) FOR DaoPackage»
«EXPAND commonMetadataFiles(model) FOR this»
«EXPAND metadataFiles(model) FOREACH dao»
«ENDDEFINE»

«DEFINE metadataFiles(DBAccessModel model) FOR DataAccessObject»
«EXPAND metadataFile(model) FOR this»
«ENDDEFINE»


«DEFINE metadataFile(DBAccessModel model) FOR DataAccessObject»
«LET getPkgPackage((DaoPackage)(this.eContainer), model) AS pkgPackage-»
«FILE getMetadataFullPath(this, model)»package «pkgPackage».metadata;

import «pkgPackage».dto.*;
import «getDALayerBasePkg(model)».metadata.*;
import java.util.List;

/**
 * @generated
 */
public class «getMetadataClassName()» extends DAOMetadata{
	
	/**
	 * contiene l'elenco dei nomi delle property del DTO associato al DAO a cui
	 * questi metadati fanno riferimento
	 */
	private final String[] propertyNames;
	
	/**
	 * contiene l'elenco dei nomi delle colonne della tabella associata al DAO a cui
	 * questi metadati fanno riferimento
	 */
	private final String[] columnNames;	
	
	/**
	 * Contiene i metadati relativi a:
	 * DAO: [«this.name»]
	 * tabella: [«this.mainTable.name»].
	 */
	public «getMetadataClassName()»(){
		columnNames = new String[]{«FOREACH mainTable.columns AS currCol SEPARATOR ','-»"«currCol.name»"«ENDFOREACH-»
		«IF this.lookupResolvers!=null && this.lookupResolvers.resolvers.size >0-»
		,«EXPAND metadataColumnNames4Resolver(this) FOREACH this.lookupResolvers.resolvers-»
		«ENDIF-»
		};		
		propertyNames = new String[]{«FOREACH mainTable.columns AS currCol SEPARATOR ','-»"«javaPropertyNameFromColumn(currCol)»"«ENDFOREACH-»
		«IF this.lookupResolvers!=null && this.lookupResolvers.resolvers.size >0-»
		,«EXPAND metadataPropNames4Resolver(this) FOREACH this.lookupResolvers.resolvers-»
		«ENDIF-»
		};
		for (int i = 0; i < columnNames.length; i++) {
			columnsNamesMap.put(propertyNames[i], columnNames[i]);
			
		}
	}
	
	
	/**
	 * Method 'getTableName'
	 * Restituisce il nome della tabella a cui il DAO [«this.name»] fa riferimento
	 * («this.mainTable.name»).
	 * @return String
	 * @generated
	 */
	public String getTableName()
	{
		return "«mainTable.name»";
	}
	
	/**
	 * Method 'getColumnNames'
	 * Restutuisce l'insieme dei nomi delle colonne gestite dal DAO.
	 * @return String[]
	 * @generated
	 */
	public String[] getColumnNames() {
		String ris []  = new String[columnNames.length];
		System.arraycopy(columnNames, 0, ris, 0, columnNames.length);
		return ris;
	}
		
}
«ENDFILE-»
«ENDLET-»
«ENDDEFINE»

«DEFINE metadataPropNames4Resolver(DataAccessObject dao) FOR LookupResolver-»
«FOREACH this.foreignKey.includedColumns AS currFKColumn ITERATOR i SEPARATOR ","-»
		"«javaPropertyPathForResolvedColumn(this, this.foreignKey,i.counter0)»"
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE metadataColumnNames4Resolver(DataAccessObject dao) FOR LookupResolver-»
«FOREACH this.foreignKey.includedColumns AS currFKColumn ITERATOR i SEPARATOR ","-»
		"«currFKColumn.name»"
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE metadataCase4Resolver(DataAccessObject dao) FOR LookupResolver-»
«FOREACH this.foreignKey.includedColumns AS currFKColumn ITERATOR i-»
		// [«javaPropertyPathForResolvedColumn(this, this.foreignKey,i.counter0)»] -> [«currFKColumn.name»]
		if ("«javaPropertyPathForResolvedColumn(this, this.foreignKey,i.counter0)»".equalsIgnoreCase(propName)){
			return "«currFKColumn.name»";
		}
«ENDFOREACH»
«ENDDEFINE»

«DEFINE getColumnNameMethod(DataAccessObject dao) FOR Table»
	/**
	 * Restituisce il nome della colonna a cui fa riferimento una particolare 
	 * property del DTO.
	 * La colonna puo' appartenere alla tabella gestita direttamente dal DAO, 
	 * oppure puo' essere una colonna di una tabella "satellite" (caso di foreign key).
	 * @param prefixPropName se presente indica un path di ricorsione all'interno del DTO
	 * @param propName il nome della property di cui serve ottenere la colonna relativa
	 * @return il nome della colonna associata a propName, visto anche il prefisso eventuale
	 * prefixPropName
	 * @generated
	 */
	public String getColumnName(String prefixPropName, String propName){
		if (prefixPropName!=null && prefixPropName.length()>0)
			return getColumnName(prefixPropName+"."+propName);
		else
			return getColumnName(propName);
	}

	/**
 	 * Restituisce il nome della colonna a cui fa riferimento una particolare 
	 * property del DTO.
	 * @param propName il nome della property di cui serve ottenere la colonna relativa
	 * @return il nome della colonna associata a propName
	 * @generated
	 */
	public String getColumnName(String propName){
		// proprieta' "dirette" del DTO
		«FOREACH columns AS currCol-»
		«IF currCol.isForeignKey!=null && currCol.isForeignKey && dao.lookupResolvers != null && dao.lookupResolvers.resolvers.select(r|r.foreignKey.includedColumns.contains(currCol)).size >0-»
		«ELSE-»
		// [«javaPropertyNameFromColumn(currCol)»] -> [«currCol.name»] 
		if ("«javaPropertyNameFromColumn(currCol)»".equalsIgnoreCase(propName)){
			return "«currCol.name»";
		}
		«ENDIF-»
		«ENDFOREACH-»
		«IF dao.lookupResolvers!=null && dao.lookupResolvers.resolvers.size >0-»
		// proprieta' indirette del DAO (legate a LookupResolver)
		«EXPAND metadataCase4Resolver(dao) FOREACH dao.lookupResolvers.resolvers-»
		«ENDIF-»
		/// se non trovato
		throw new IllegalArgumentException("proprieta' "+propName+" non trovata per il DTO «getDtoClassName(dao)»");
	}
«ENDDEFINE»

«DEFINE commonMetadataFiles(DBAccessModel model) FOR DaoPackage»
«FILE getDALayerBaseDir(model)+"/metadata/DAOMetadata.java"»package «getDALayerBasePkg(model)».metadata;

import java.io.*;
import java.sql.*;


/**
 * Classe astratta per i DAO Metadata.
 * Per ogni DAO deve essere definita una sottoclasse di questa classe astratta
 * che conterra' i metadati relativi alla tabella gestita dal DAO. 
 * @generated
 */
public abstract class DAOMetadata
{
	public java.util.Map<String, String> columnsNamesMap = new java.util.HashMap<String, String>();
	
	public DAOMetadata()
	{
		// costruttore intenzionalmente vuoto
	}
	
	/**
	 * Method 'getTableName'
	 * Restituisce il nome della tabella a cui fanno riferimento i metadati.
	 * Questo metodo astratto deve essere definito nelle sottoclassi e restituire
	 * il nome della tabella gestita dallo specifico DAO.
	 * @return String
	 * @generated
	 */
	public abstract String getTableName();
	
	/**
	 * Method 'getColumnName'
	 * 
	 * @param prefixPropName prefisso (opzionale) da apporre al nome della property
	 *        nei casi in cui si debba scendere ricorsivamente in esempi annidati 
	 * @param propName nome della property
	 * @return String il nome di colonna associata alla property <prefixPropName>.<propName>
	 *                o <propName> se <prefixPropName> e' nullo
	 * @generated
	 */
	
	public String getColumnName(String prefixPropName, String propName) {
		if (prefixPropName != null && prefixPropName.length() > 0)
			return getColumnName(prefixPropName + "." + propName);
		else
			return getColumnName(propName);
	}
	
	/**
	 * Method 'getColumnName'
	 * 
	 * @param propName nel formato <prefixPropName>.<propName> oppure <propName>
	 * @return String il nome di colonna associata alla property <prefixPropName>.<propName>
	 *                o <propName> se <prefixPropName> e' nullo
	 * @generated
	 */
	public String getColumnName(String propName) {
		if(columnsNamesMap .containsKey(propName))
		{
			return columnsNamesMap.get(propName);
		}

		/// se non trovato
		throw new IllegalArgumentException("proprieta' " + propName
				+ " non trovata per il DTO RuoloProfiloLowDto");
	}
	
	/**
	 * Method 'getColumnNames'
	 * Restituisce l'elenco dei nomi di tutte le colonne gestite dal DAO 
	 * (ovvero l'elenco di tutte le colonne della tabella).
	 * Deve essere sovrascritto nelle sottoclassi specifiche in modo da restituire
	 * i nomi effettivi.
	 * @return String[]
	 * @generated
	 */
	public abstract String[] getColumnNames();
		
	
	
}
«ENDFILE»

«FILE getPkgDir(this, model)+"/exceptions/DaoException.java"»package «getPkgPackage(this, model)».exceptions;

/**
 * @generated
 */
public class DaoException extends Exception
{
	/**
	 * @generated
	 */
	protected Throwable throwable;

	/**
	 * Method 'DaoException'
	 * 
	 * @param message
	 * @generated
	 */
	public DaoException(String message)
	{
		super(message);
	}

	/**
	 * Method 'DaoException'
	 * 
	 * @param message
	 * @param throwable
	 * @generated
	 */
	public DaoException(String message, Throwable throwable)
	{
		super(message);
		this.throwable = throwable;
	}

	/**
	 * Method 'getCause'
	 * 
	 * @return Throwable
	 * @generated
	 */
	public Throwable getCause()
	{
		return throwable;
	}

}
«ENDFILE»
«ENDDEFINE»


«REM»gestire l'univocità della regione protetta per la compatibilità con servicegen«ENDREM»
«DEFINE utilFiles FOR DBAccessModel»
«FILE getDALayerBaseDir(this)+"/util/Constants.java"»package «getDALayerBasePkg(this)».util;
/**
* @generated
*/
public final class Constants {
	/**
	 * identificativo dell'applicativo.
	 */
	public static final String APPLICATION_CODE = "«this.codComponente.toUpperCase()»";
	
	«PROTECT CSTART '/*' CEND '*/' ID getRegionUID("DaoConstants", this.name)»
	
	«ENDPROTECT»
}
«ENDFILE»
«ENDDEFINE»

