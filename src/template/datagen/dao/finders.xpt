«IMPORT ecore»
«IMPORT datagen»
«IMPORT rdbmdl»
«IMPORT rdbmdl::constraints»
«IMPORT rdbmdl::datatypes»
«IMPORT rdbmdl::view»

«EXTENSION template::DatagenExtensions»

«DEFINE finders(DBAccessModel model, boolean body) FOR DataAccessObject-»
«IF finders!=null-»
«EXPAND finder(model, this, body) FOREACH this.finders.finders-»
«ENDIF-»
«ENDDEFINE»

«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR Finder»
«ERROR "finder "+this.metaType+" non gestito"»
«ENDDEFINE»


«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR FindByPK»
	/** 
	 * Returns all rows from the «dao.mainTable.name» table that match the primary key criteria
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	public «getDtoClassName(dao)» findByPrimaryKey(«getPkClassName(dao)» pk) throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		
		final String sql = "SELECT «EXPAND template::datagen::dao::daoFiles::columnNameList FOR dao.mainTable.columns» FROM " + getTableName() + "WHERE «EXPAND template::datagen::dao::daoFiles::setColumnEqPlaceholderList(" AND ") FOR dao.mainTable.primaryKey.includedColumns»";
		
		MapSqlParameterSource params = new MapSqlParameterSource();
		«EXPAND template::datagen::dao::daoFiles::paramValorizationList("pk") FOR dao.mainTable.primaryKey.includedColumns»
		List<«getDtoClassName(dao)»> list = null;
		
		StopWatch stopWatch = new StopWatch(Constants.APPLICATION_CODE);
		try {
			stopWatch.start();
			list = jdbcTemplate.query(sql, params, this);
			
		} catch (RuntimeException ex) {
			log.error("[«getDaoImplClassName(dao)»::findByPrimaryKey] esecuzione query",ex);
			throw new «getDaoExcClassName(dao)»("Query failed", ex);
		} finally {
			stopWatch.dumpElapsed("«getDaoImplClassName(dao)»", "findByPrimaryKey","esecuzione query", sql);
			log.debug("[«getDaoImplClassName(dao)»::findByPrimaryKey] END");
		}

		return list.size() == 0 ? null : list.get(0);
		
	}
	«ELSE-»
	;
	«ENDIF-»
	
«ENDDEFINE»

«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR FindAll»
	/** 
	 * Returns all rows from the «dao.mainTable.name» table that match the criteria ''.
	 * @generated
	 */
	public List<«getDtoClassName(dao)»> findAll() throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		final String sql = "SELECT «EXPAND template::datagen::dao::daoFiles::columnNameList FOR dao.mainTable.columns» FROM " + getTableName();
		
		MapSqlParameterSource params = new MapSqlParameterSource();
		
		List<«getDtoClassName(dao)»> list = null;
		
		StopWatch stopWatch = new StopWatch(Constants.APPLICATION_CODE);
		try {
			stopWatch.start();
			list = jdbcTemplate.query(sql, params, this);
			
		} catch (RuntimeException ex) {
			log.error("[«getDaoImplClassName(dao)»::findAll] esecuzione query",ex);
			throw new «getDaoExcClassName(dao)»("Query failed", ex);
		} finally {
			stopWatch.dumpElapsed("«getDaoImplClassName(dao)»", "findAll","esecuzione query", sql);
			log.debug("[«getDaoImplClassName(dao)»::findAll] END");
		}

		return list;
		
	}
	«ELSE-»
	;
	«ENDIF-»
	
«ENDDEFINE»


«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR CustomFinder»
	/** 
	 * Implementazione del finder «name»
	 * @generated
	 */
«LET isNullOrEmpty(filterClassFQN) ? "java.lang.Object" : (filterClassFQN=="$dto" ? getDtoFQN(dao, model) : (filterClassFQN=="$dto[]"? "java.util.ArrayList<"+getDtoFQN(dao, model)+">" : filterClassFQN) ) AS filterJavaType-»
	public List<«getDtoClassName(dao)»> find«name.toFirstUpper()»(«filterJavaType» input) throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(dao.name+"finder"+this.name+"queryandvalues")»
		// personalizzare la query SQL relativa al finder
		String sql = "SELECT * from «dao.mainTable.name» WHERE ";
		
		// personalizzare l'elenco dei parametri da passare al jdbctemplate (devono corrispondere in tipo e
		// numero ai parametri definiti nella queryString)
		sql +="nome = :nome";
		//***aggiungere tutte le condizioni
		Map<String, Object> paramMap = new TreeMap<String, Object>();
		paramMap.put("nome", input);
		
		«ENDPROTECT»
		List<«getDtoClassName(dao)»> list = null;
					StopWatch stopWatch = new StopWatch(Constants.APPLICATION_CODE);
		try {
			stopWatch.start();
			list = jdbcTemplate.query(sql, paramMap, this);
			
		} catch (RuntimeException ex) {
			log.error("[«getDaoImplClassName(dao)»::find«name.toFirstUpper()»] esecuzione query",ex);
			throw new «getDaoExcClassName(dao)»("Query failed", ex);
		} finally {
			stopWatch.dumpElapsed("«getDaoImplClassName(dao)»", "find«name.toFirstUpper()»","esecuzione query", sql);
			log.debug("[«getDaoImplClassName(dao)»::find«name.toFirstUpper()»] END");
		}
		return list;	
	}
	«ELSE-»
	;
	«ENDIF-»
«ENDLET-»	
«ENDDEFINE»

