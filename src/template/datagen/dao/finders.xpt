«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT ecore»
«IMPORT datagen»
«IMPORT rdbmdl»
«IMPORT rdbmdl::constraints»
«IMPORT rdbmdl::datatypes»
«IMPORT rdbmdl::view»

«EXTENSION template::DatagenExtensions»

«DEFINE finders(DBAccessModel model, boolean body) FOR DataAccessObject-»
«IF finders!=null-»
«EXPAND finder(model, this, body) FOREACH this.finders.finders-»
«ENDIF-»
«ENDDEFINE»

«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR Finder»
«ERROR "finder "+this.metaType+" non gestito"»
«ENDDEFINE»


«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR FindByPK»
	/** 
	 * Returns all rows from the «dao.mainTable.name» table that match the primary key criteria
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	public «getDtoClassName(dao)» findByPrimaryKey(«getPkClassName(dao)» pk) throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		
		final StringBuilder sql = new StringBuilder("SELECT «EXPAND template::datagen::dao::daoFiles::columnNameList(false) FOR dao.mainTable.columns» FROM " + getTableName() + " WHERE «EXPAND template::datagen::dao::daoFiles::setColumnEqPlaceholderList(" AND ") FOR dao.mainTable.primaryKey.includedColumns»");
		
		MapSqlParameterSource params = new MapSqlParameterSource();
		«EXPAND template::datagen::dao::daoFiles::paramValorizationList("pk", dao) FOR dao.mainTable.primaryKey.includedColumns»
		List<«getDtoClassName(dao)»> list = null;
		
		StopWatch stopWatch = new StopWatch(Constants.APPLICATION_CODE);
		try {
			«IF dao.cacheability == CacheabilityTypes::ALMOST_STABLE_DATA-»
			«getDtoClassName(dao)» res = («getDtoClassName(dao)»)cache.get(pk);
			if(res!=null){
				log.debug("Dato trovato in cache");
				return res;
			}			
			else{
			«ENDIF-»
				stopWatch.start();
				list = jdbcTemplate.query(sql.toString(), params, «name»RowMapper);
			«IF dao.cacheability == CacheabilityTypes::ALMOST_STABLE_DATA-»
			if(list!=null && !list.isEmpty()){
					cache.put(pk , list.get(0));	
				}
			}
			«ENDIF-»	
		} catch (RuntimeException ex) {
			log.error("[«getDaoImplClassName(dao)»::findByPrimaryKey] esecuzione query",ex);
			throw new «getDaoExcClassName(dao)»("Query failed", ex);
		} finally {
			stopWatch.dumpElapsed("«getDaoImplClassName(dao)»", "findByPrimaryKey","esecuzione query", sql.toString());
			log.debug("[«getDaoImplClassName(dao)»::findByPrimaryKey] END");
		}

		return list.size() == 0 ? null : list.get(0);
		
	}
	«ELSE-»
	;
	«ENDIF-»
	
«ENDDEFINE»

«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR FindAll»
	/** 
	 * Returns all rows from the «dao.mainTable.name» table that match the criteria ''.
	 * @generated
	 */
	 @SuppressWarnings("unchecked")
	public List<«getDtoClassName(dao)»> findAll_«this.name»() throws «getDaoExcClassName(dao)»
	«IF body-»
	{		
		final StringBuilder sql = new StringBuilder("SELECT «IF this.distinct==null || this.distinct.isEmpty-»«EXPAND template::datagen::dao::daoFiles::columnNameList(false) FOR dao.mainTable.columns-»«ELSE-»«EXPAND template::datagen::dao::daoFiles::columnNameList(true) FOR this.distinct-»«ENDIF-» FROM " + getTableName());
		«EXPAND template::datagen::dao::daoFiles::orderByClause FOR this.orderSpecs-»
		
		MapSqlParameterSource params = new MapSqlParameterSource();
		
		List<«getDtoClassName(dao)»> list = null;
		
		StopWatch stopWatch = new StopWatch(Constants.APPLICATION_CODE);
		try {
			stopWatch.start();
			list = jdbcTemplate.query(sql.toString(), params, «name»RowMapper);
			
		} catch (RuntimeException ex) {
			log.error("[«getDaoImplClassName(dao)»::findAll] esecuzione query",ex);
			throw new «getDaoExcClassName(dao)»("Query failed", ex);
		} finally {
			stopWatch.dumpElapsed("«getDaoImplClassName(dao)»", "findAll","esecuzione query", sql.toString());
			log.debug("[«getDaoImplClassName(dao)»::findAll] END");
		}

		return list;
		
	}
	«ELSE-»
	;
	«ENDIF-»
	
«ENDDEFINE»


«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR CustomFinder»
	/** 
	 * Implementazione del finder «name»
	 * @generated
	 */
	 @SuppressWarnings("unchecked")
«LET isNullOrEmpty(filterClassFQN) ? "java.lang.Object" : (filterClassFQN=="$dto" ? getDtoFQN(dao, model) : (filterClassFQN=="$dto[]"? "java.util.ArrayList<"+getDtoFQN(dao, model)+">" : filterClassFQN) ) AS filterJavaType-»
	public List<«getDtoClassName(dao)»> find«name.toFirstUpper()»(«filterJavaType» input) throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		StringBuilder sql = new StringBuilder();
		MapSqlParameterSource paramMap = new MapSqlParameterSource();
		«IF customSelect-»
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(dao.name+"finder"+this.name+"select")»
		// la clausola select e'customizzabile poiche' il finder ha l'attributo customSelect == true
		sql.append("SELECT «IF this.distinct==null || this.distinct.isEmpty-»«EXPAND template::datagen::dao::daoFiles::columnNameList(false) FOR dao.mainTable.columns-»«ELSE-»«EXPAND template::datagen::dao::daoFiles::columnNameList(true) FOR this.distinct-»«ENDIF-» ");
		«ENDPROTECT»
		«ELSE»
		sql.append("SELECT «IF this.distinct==null || this.distinct.isEmpty-»«EXPAND template::datagen::dao::daoFiles::columnNameList(false) FOR dao.mainTable.columns-»«ELSE-»«EXPAND template::datagen::dao::daoFiles::columnNameList(true) FOR this.distinct-»«ENDIF-» ");
		«ENDIF-»
		«IF customFrom-»
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(dao.name+"finder"+this.name+"from")»
		// la clausola from e'customizzabile poiche' il finder ha l'attributo customFrom==true
		sql.append(" FROM «dao.mainTable.name»");
		«ENDPROTECT»
		«ELSE-»
		sql.append(" FROM «dao.mainTable.name»");
		«ENDIF-»
		sql.append(" WHERE ");
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(dao.name+"finder"+this.name+"query")»
		// personalizzare la query SQL relativa al finder
		
		
		// personalizzare l'elenco dei parametri da passare al jdbctemplate (devono corrispondere in tipo e
		// numero ai parametri definiti nella queryString)
		sql.append("nome = :nome");	
		«ENDPROTECT»
			«EXPAND template::datagen::dao::daoFiles::orderByClause FOR this.orderSpecs-»
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(dao.name+"finder"+this.name+"values")»			
		//***aggiungere tutte le condizioni
		
		paramMap.addValue("nome", input);
		
		«ENDPROTECT»
		List<«getDtoClassName(dao)»> list = null;
		StopWatch stopWatch = new StopWatch(Constants.APPLICATION_CODE);
		try {
			stopWatch.start();
			list = jdbcTemplate.query(sql.toString(), paramMap, «name»RowMapper);
			
		} catch (RuntimeException ex) {
			log.error("[«getDaoImplClassName(dao)»::find«name.toFirstUpper()»] esecuzione query",ex);
			throw new «getDaoExcClassName(dao)»("Query failed", ex);
		} finally {
			stopWatch.dumpElapsed("«getDaoImplClassName(dao)»", "find«name.toFirstUpper()»","esecuzione query", sql.toString());
			log.debug("[«getDaoImplClassName(dao)»::find«name.toFirstUpper()»] END");
		}
		return list;	
	}
	«ELSE-»
	;
	«ENDIF-»
«ENDLET-»	
«ENDDEFINE»


«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR QBEFinder»
	/** 
	 * Implementazione del finder «name» query-by-example
	 * @generated
	 */
«LET (DaoPackage)(dao.eContainer) AS pkg-»
	public List<«getDtoClassName(dao)»> findByExamples_«this.name»(ArrayList<«getQbeExFQN(dao,model)»> positive, ArrayList<«getQbeExFQN(dao,model)»> negative) throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		//verifiche consistenza esempi
		if (positive == null) {
			throw new «getDaoExcClassName(dao)»(
					"Il set degli esempi positivi e' null. Impossibile costruire la query.");
		}
		if (negative == null) {
			throw new «getDaoExcClassName(dao)»(
					"Il set degli esempi negativi e' null. Impossibile costruire la query.");
		}
		
		if (positive.size() == 0 && negative.size() == 0) {
			throw new «getDaoExcClassName(dao)»(
					"Il set degli esempi positivi e negativi e' vuoto. Impossibile costruire la query.");
		}
		
		// personalizzare la query SQL relativa al finder
		QBEQueryBuilder<«getQbeExClassName(dao)»> builder = new QBEQueryBuilder<«getQbeExClassName(dao)»>(new «getMetadataClassName(dao)»(«EXPAND template::datagen::dao::daoFiles::distinctColumnsIfNecessary FOR this.distinct-»));
		StringBuilder sql = null;
		try{
			sql = new StringBuilder(builder.createFromExamples(positive, negative,«IF this.distinct!=null && !this.distinct.isEmpty-»true«ELSE-»false«ENDIF-»));
		}catch (StringIndexOutOfBoundsException e) {
			throw new «getDaoExcClassName(dao)»("E' stato valorizzato almeno un esempio senza nessun FieldCheck associato.Impossibile creare la query.");
		} catch (IllegalArgumentException e) {
			throw new «getDaoExcClassName(dao)»("E' stato valorizzato un campo di un esempio complesso non corrispondente alla PK della tabella di lookup.");
		}
		«EXPAND template::datagen::dao::daoFiles::orderByClause FOR this.orderSpecs-»
		
		List<«getDtoClassName(dao)»> list = null;
					StopWatch stopWatch = new StopWatch(Constants.APPLICATION_CODE);
		try {
			stopWatch.start();
			list = jdbcTemplate.query(sql.toString(), new HashMap(), «name»RowMapper);
			
		} catch (RuntimeException ex) {
			log.error("[«getDaoImplClassName(dao)»::findByExamples_«this.name»] esecuzione query",ex);
			throw new «getDaoExcClassName(dao)»("Query failed", ex);
		} finally {
			stopWatch.dumpElapsed("«getDaoImplClassName(dao)»", "findByExamples_«this.name»","esecuzione query", sql.toString());
			log.debug("[«getDaoImplClassName(dao)»::findByExamples] END");
		}
		return list;	
	}
	«ELSE-»
	;
	«ENDIF-»	
«ENDLET-»
«ENDDEFINE»

