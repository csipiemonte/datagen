«IMPORT ecore»
«IMPORT datagen»
«IMPORT rdbmdl»
«IMPORT rdbmdl::constraints»
«IMPORT rdbmdl::datatypes»
«IMPORT rdbmdl::view»

«EXTENSION template::DatagenExtensions»

«DEFINE finders(DBAccessModel model, boolean body) FOR DataAccessObject-»
«IF finders!=null-»
«EXPAND finder(model, this, body) FOREACH this.finders.finders-»
«ENDIF-»
«ENDDEFINE»


«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR FindByPK»
	/** 
	 * Returns all rows from the «dao.mainTable.name» table that match the primary key criteria
	 * @generated
	 */
	public «getDtoClassName(dao)» findByPrimaryKey(«getPkClassName(dao)» pk) throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		try {
			List<«getDtoClassName(dao)»> list = jdbcTemplate.query("SELECT «EXPAND template::datagen::dao::daoFiles::columnNameList FOR dao.mainTable.columns» FROM " + getTableName() + " «EXPAND template::datagen::dao::daoFiles::setColumnEqPlaceholderList(" AND ") FOR dao.mainTable.primaryKey.includedColumns»", this,«EXPAND template::datagen::dao::daoFiles::paramValorizationList("pk") FOR dao.mainTable.primaryKey.includedColumns»);
			return list.size() == 0 ? null : list.get(0);
		}
		catch (Exception e) {
			throw new «getDaoExcClassName(dao)»("Query failed", e);
		}		
	}
	«ELSE-»
	;
	«ENDIF-»
	
«ENDDEFINE»

«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR FindAll»
	/** 
	 * Returns all rows from the «dao.mainTable.name» table that match the criteria ''.
	 * @generated
	 */
	public List<«getDtoClassName(dao)»> findAll() throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		try {
			return jdbcTemplate.query("SELECT «EXPAND template::datagen::dao::daoFiles::columnNameList FOR dao.mainTable.columns» FROM " + getTableName() , this);
		}
		catch (Exception e) {
			throw new «getDaoExcClassName(dao)»("Query failed", e);
		}
	}
	«ELSE-»
	;
	«ENDIF-»
	
«ENDDEFINE»



«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR Finder»
«ERROR "finder "+this.metaType+" non gestito"»
«ENDDEFINE»

«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR CustomFinder»
	/** 
	 * Implementazione del finder «name»
	 * @generated
	 */
	public List<«getDtoClassName(dao)»> find«name.toFirstUpper()»(Object input) throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		try {
			«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(dao.name+"finder"+this.name+"queryandvalues")»
			// personalizzare la query SQL relativa al finder
			String queryString = "SELECT * from «dao.mainTable.name»";
			
			// personalizzare l'elenco dei parametri da passare al jdbctemplate (devono corrispondere in tipo e
			// numero ai parametri definiti nella queryString - tramite "?")
			Object [] params = new Object[]{};
			«ENDPROTECT»
			List<«getDtoClassName(dao)»> list = 
				jdbcTemplate.query(queryString, this, params);
			return list;
		}
		catch (Exception e) {
			throw new «getDaoExcClassName(dao)»("Query failed", e);
		}		
	}
	«ELSE-»
	;
	«ENDIF-»
	
«ENDDEFINE»

