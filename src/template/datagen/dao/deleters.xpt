«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT ecore»
«IMPORT datagen»
«IMPORT rdbmdl»
«IMPORT rdbmdl::constraints»
«IMPORT rdbmdl::datatypes»
«IMPORT rdbmdl::view»

«EXTENSION template::DatagenExtensions»

«DEFINE deleters(DBAccessModel model, boolean body) FOR DataAccessObject-»
«IF deleters!=null-»
«EXPAND deleter(model, this, body) FOREACH this.deleters.deleters-»
«ENDIF-»
«ENDDEFINE»

«DEFINE deleter(DBAccessModel model, DataAccessObject dao, boolean body) FOR Deleter»
«ERROR "deleter non gestito:"+metaType»
«ENDDEFINE»

«DEFINE deleter(DBAccessModel model, DataAccessObject dao, boolean body) FOR CustomDeleter»
«LET isNullOrEmpty(filterClassFQN) ? "java.lang.Object" : (filterClassFQN=="$dto" ? getDtoFQN(dao, model) : (filterClassFQN=="$dto[]"? "java.util.ArrayList<"+getDtoFQN(dao, model)+">" : filterClassFQN) ) AS filterJavaType-»
	/** 
	 * Custom deleter in the «dao.mainTable.name» table.
	 * @generated
	 */	
	public void customDeleter«name.toFirstUpper()»(«filterJavaType» filter) throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(getDaoImplFQN(dao, model)+"customDeleter"+name.toFirstUpper(), this.name)»
		//***scrivere la custom query
		final String sql = "DELETE FROM " + getTableName() + " WHERE ";
		MapSqlParameterSource params = new MapSqlParameterSource();
		params.addValue("parametro", filter);
		«ENDPROTECT»
		«REM»
		StopWatch stopWatch = new StopWatch(Constants.APPLICATION_CODE);
		try {
			stopWatch.start();
			jdbcTemplate.update(sql.toString(), params);
		} catch (RuntimeException ex) {
			log.error("[«getDaoImplClassName(dao)»::delete] esecuzione query",ex);
			throw new «getDaoExcClassName(dao)»("Query failed", ex);
		} finally {
			stopWatch.dumpElapsed("«getDaoImplClassName(dao)»", "delete","esecuzione query", sql);
			log.debug("[«getDaoImplClassName(dao)»::delete] END");
		}
		«ENDREM»
		delete(jdbcTemplate, sql.toString(), params);
	}
	«ELSE-»
	;
	«ENDIF-»
«ENDLET»
«ENDDEFINE»

«DEFINE deleter(DBAccessModel model, DataAccessObject dao, boolean body) FOR DeleteByPK»
	/** 
	 * Deletes a single row in the «dao.mainTable.name» table.
	 * @generated
	 */
	
	public void delete(«getPkClassName(dao)» pk) throws «getDaoExcClassName(dao)»
	«IF body-»
	{	
		log.debug("[«getDaoImplClassName(dao)»::delete] START");
		final String sql = "DELETE FROM " + getTableName() + " WHERE «EXPAND template::datagen::dao::daoFiles::setColumnEqPlaceholderList(" AND ") FOR dao.mainTable.primaryKey.includedColumns»";
		
		if(pk == null){
			log.error("[«getDaoImplClassName(dao)»::delete] ERROR chiave primaria non impostata");
			throw new «getDaoExcClassName(dao)»("Chiave primaria non impostata");
		}
		
		MapSqlParameterSource params = new MapSqlParameterSource();
		«EXPAND template::datagen::dao::daoFiles::paramValorizationList("pk", dao) FOR dao.mainTable.primaryKey.includedColumns»
		«REM»
		StopWatch stopWatch = new StopWatch(Constants.APPLICATION_CODE);
		try {
			stopWatch.start();
			jdbcTemplate.update(sql.toString(), params);
		} catch (RuntimeException ex) {
			log.error("[«getDaoImplClassName(dao)»::delete] esecuzione query",ex);
			throw new «getDaoExcClassName(dao)»("Query failed", ex);
		} finally {
			stopWatch.dumpElapsed("«getDaoImplClassName(dao)»", "delete","esecuzione query", sql);
			log.debug("[«getDaoImplClassName(dao)»::delete] END");
		}
		«ENDREM»
		delete(jdbcTemplate, sql.toString(), params);
		log.debug("[«getDaoImplClassName(dao)»::delete] END");
	}
	«ELSE-»
	;
	«ENDIF-»
	
«ENDDEFINE»

«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR FindAll»
	/** 
	 * Returns all rows from the «dao.mainTable.name» table that match the criteria ''.
	 * @generated
	 */
	public List<«getDtoClassName(dao)»> findAll_«this.name»() throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		try {
			return jdbcTemplate.query("SELECT «EXPAND template::datagen::dao::daoFiles::columnNameList FOR dao.mainTable.columns» FROM " + getTableName() , this);
		}
		catch (Exception e) {
			throw new «getDaoExcClassName(dao)»("Query failed", e);
		}
	}
	«ELSE-»
	;
	«ENDIF-»
	
«ENDDEFINE»



«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR Finder»
«ERROR "finder "+this.metaType+" non gestito"»
«ENDDEFINE»

«DEFINE finder(DBAccessModel model, DataAccessObject dao, boolean body) FOR CustomFinder»
	/** 
	 * Implementazione del finder «name»
	 * @generated
	 */
	public List<«getDtoClassName(dao)»> find«name.toFirstUpper()»(Object input) throws «getDaoExcClassName(dao)»
	«IF body-»
	{
		try {
			«PROTECT CSTART '/*' CEND '*/' ID getRegionUID(dao.name+"finder"+this.name+"queryandvalues", model.name)»
			// personalizzare la query SQL relativa al finder
			String queryString = "SELECT * from «dao.mainTable.name»";
			
			// personalizzare l'elenco dei parametri da passare al jdbctemplate (devono corrispondere in tipo e
			// numero ai parametri definiti nella queryString - tramite "?")
			Object [] params = new Object[]{};
			«ENDPROTECT»
			List<«getDtoClassName(dao)»> list = 
				jdbcTemplate.query(queryString, this, params);
			return list;
		}
		catch (Exception e) {
			throw new «getDaoExcClassName(dao)»("Query failed", e);
		}		
	}
	«ELSE-»
	;
	«ENDIF-»
	
«ENDDEFINE»

