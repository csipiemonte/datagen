«REM»
C) Copyright 2011 CSI-PIEMONTE;                                             
                                                                            
Concesso in licenza a norma dell'EUPL, esclusivamente versione 1.1;         
Non e' possibile utilizzare l'opera salvo nel rispetto della Licenza.       
E' possibile ottenere una copia della Licenza al seguente indirizzo:        
                                                                            
http://www.eupl.it/opensource/eupl-1-1                                      
                                                                            
Salvo diversamente indicato dalla legge applicabile o concordato per        
iscritto, il software distribuito secondo i termini della Licenza e'        
distribuito "TAL QUALE", SENZA GARANZIE O CONDIZIONI DI ALCUN TIPO,         
esplicite o implicite.                                                      
Si veda la Licenza per la lingua specifica che disciplina le autorizzazioni 
e le limitazioni secondo i termini della Licenza.                           
«ENDREM»

«IMPORT ecore»
«IMPORT datagen»
«IMPORT rdbmdl»
«IMPORT rdbmdl::constraints»
«IMPORT rdbmdl::datatypes»
«IMPORT rdbmdl::view»

«EXTENSION template::DatagenExtensions»

«DEFINE dtoFiles FOR DBAccessModel»
«EXPAND dtoFiles(this) FOREACH daopkgs»
«ENDDEFINE»

«DEFINE dtoFiles (DBAccessModel model) FOR DaoPackage»
«EXPAND dtoFile(model) FOREACH dao»
«REM»creazione del DTO per il custom finder con QDef«ENDREM»
«LET this.dao.select(d|d.finders!=null && d.finders.finders.size>0) AS daoWithFinders»
«IF daoWithFinders!=null && daoWithFinders.size>0»
	«LET daoWithFinders.finders.finders.typeSelect(CustomFinder).select(f|f.queryDefinition!=null) AS customJoinFinders»
		«EXPAND dtoFileCustomFinderQDef(model) FOREACH customJoinFinders »
	«ENDLET»
«ENDIF»
«ENDLET»





«EXPAND dtoPkFile(model) FOREACH dao.select(d|d.mainTable.primaryKey != null)»
«ENDDEFINE»

«DEFINE dtoPkFile(DBAccessModel model) FOR DataAccessObject»
«LET getPkgPackage((DaoPackage)(this.eContainer), model) AS pkgPackage-»
«FILE getPkFullPath(this, model)»package «pkgPackage».dto;

import «pkgPackage».dao.*;
import «pkgPackage».exceptions.*;
import java.io.Serializable;
import java.util.*;

/**
 * Primary Key del DTO «getDtoClassName()».
 * E' utilizzato per tutte le operazioni di lettura dati per chiave primaria. 
 * @generated
 */
public class «getPkClassName()» implements Serializable {

	private static final long serialVersionUID = 1L;

	«EXPAND columnJavaProperty(this) FOREACH this.mainTable.primaryKey.includedColumns»
	«REM» al momento non gestiamo il caso di FK che e' anche parte di PK nello stesso modo in cui
	facciamo per il dto della tabella che presenta la foreign key 
	«IF this.lookupResolvers!=null»
		«EXPAND lookupResolverProperty FOREACH this.lookupResolvers.resolvers.select(r|r.foreignKey.includedColumns.select(c|c.isPrimaryKey!=null && c.isPrimaryKey).size > 0)»
	«ENDIF»
	«ENDREM»
	/**
	 * Costruttore di una chiave primaria vuota
	 * @generated 
	 */
	public «getPkClassName()»(){
		//empty constructor
	}

	/**
	 * Costruttore di una chiave primaria a partire dai valori delle varie colonne
	 * @generated
	 */
	public «getPkClassName()»(
		«FOREACH mainTable.primaryKey.includedColumns AS currPKCol SEPARATOR ","»
		final «javaPropertyTypeFromColumn(currPKCol)» «javaPropertyNameFromColumn(currPKCol)»
		«ENDFOREACH»
	){
		«FOREACH mainTable.primaryKey.includedColumns AS currPKCol»
		this.set«javaPropertyNameFromColumn(currPKCol).toFirstUpper()»(«javaPropertyNameFromColumn(currPKCol)»);
		«ENDFOREACH»
	}

	/**
	 * Method 'equals'. 
	 * Due istanze di «getPkClassName()» sono equals se i valori di tutti i campi coincidono.
	 * 
	 * @param _other
	 * @return boolean se i due oggetti sono uguali
	 */
	public boolean equals(Object _other){
		if (_other == null) {
			return false;
		}
		
		if (_other == this) {
			return true;
		}
		
		if (!(_other instanceof «getPkClassName()»)) {
			return false;
		}
		
		final «getPkClassName()» _cast = («getPkClassName()») _other;
		
		«FOREACH mainTable.primaryKey.includedColumns AS currPKCol»
		if («javaPropertyNameFromColumn(currPKCol)» == null ? _cast.get«javaPropertyNameFromColumn(currPKCol).toFirstUpper()»() != null : !«javaPropertyNameFromColumn(currPKCol)».equals( _cast.get«javaPropertyNameFromColumn(currPKCol).toFirstUpper()»() )) {
			return false;
		}
		«ENDFOREACH»
		
		return true;
	}

	/**
	 * Method 'hashCode'
	 * 
	 * @return int
	 */
	public int hashCode(){
		int _hashCode = 0;
		
		«FOREACH mainTable.primaryKey.includedColumns AS currPKCol»
		if («javaPropertyNameFromColumn(currPKCol)» != null) {
			_hashCode = 29 * _hashCode + «javaPropertyNameFromColumn(currPKCol)».hashCode();
		}
		«ENDFOREACH»
		
		return _hashCode;
	}

	/**
	 * Method 'toString'
	 * 
	 * @return String
	 */
	public String toString(){
		StringBuilder ret = new StringBuilder();
		«FOREACH mainTable.primaryKey.includedColumns AS currPKCol»
		ret.append( "«pkgPackage».dto.«getPkClassName()»: " );
		ret.append( "«javaPropertyNameFromColumn(currPKCol)»=" + «javaPropertyNameFromColumn(currPKCol)» );
		«ENDFOREACH»
		return ret.toString();
	}
}

«ENDFILE»
«ENDLET»
«ENDDEFINE»

«DEFINE dtoFile(DBAccessModel model) FOR DataAccessObject»
«LET getPkgPackage((DaoPackage)(this.eContainer), model) AS pkgPackage-»
«FILE getDtoFullPath(this, model)»package «pkgPackage».dto;

import «pkgPackage».dao.*;
import «pkgPackage».exceptions.*;
import java.io.Serializable;
import java.util.*;

/**
 * Data transfer object relativo al DAO «getDaoClassName()».
 * @generated
 */
public class «getDtoClassName()» «IF this.mainTable.primaryKey!=null»extends «getPkClassName()»«ELSE»implements Serializable«ENDIF» {

	private static final long serialVersionUID = 1L;
	«LET this.mainTable.primaryKey == null ? this.mainTable.columns : this.mainTable.columns.reject(c|mainTable.primaryKey.includedColumns.uid.contains(c.uid)) AS notPKColumns-»
	«EXPAND columnJavaProperty(this) FOREACH notPKColumns»
	«ENDLET-»
	«REM»verificare se non ci sono resolvers«ENDREM»
	«IF this.lookupResolvers!=null && this.lookupResolvers.resolvers.size >0»
		«EXPAND lookupResolverProperty FOREACH this.lookupResolvers.resolvers»
	«ENDIF»
	
	«IF this.mainTable.primaryKey != null»
	/**
	 * Crea una istanza di «getPkClassName()» a partire dal valore dei campi chiave del DTO
	 * 
	 * @return «getPkClassName()»
	 * @generated
	 */
	public «getPkClassName()» createPk(){
		return new «getPkClassName()»(
		«FOREACH this.mainTable.primaryKey.includedColumns AS pkColumn SEPARATOR ","-»
			«javaPropertyNameFromColumn(pkColumn)»
		«ENDFOREACH-»
		);
	}
	
	/**
	 * la semantica dell'equals del DTO e' la stessa della PK
	 * (ovvero della superclasse).
	 * @param other l'oggetto con cui effettuare il confronto
	 * @return true se i due oggetti sono semanticamente da considerarsi uguali
	 */
	public boolean equals(Object other){
		return super.equals(other);
	}
	
	/**
	 * la semantica dell'hashCode del DTO e' la stessa della PK
	 * (ovvero della superclasse).
	 * 
	 * @return int
	 */
	public int hashCode() {
		return super.hashCode();
	}
	«ENDIF»

}


«ENDFILE»
«ENDLET-»
«ENDDEFINE»

«DEFINE columnJavaProperty(DataAccessObject dao) FOR TableColumn-»
	
	
	
	«IF this.isForeignKey!=null && this.isForeignKey && dao.lookupResolvers != null && dao.lookupResolvers.resolvers.select(r|r.foreignKey.includedColumns.contains(this)).size >0-»
	
	«ELSE-»
	/**
	 * store della proprieta' associata alla colonna «name»
	 * @generated
	 */
	protected «javaPropertyTypeFromColumn()» «javaPropertyNameFromColumn()»;
	
	/**
	 * Imposta il valore della proprieta' «javaPropertyNameFromColumn()» associata alla
	 * colonna «name».
	 * @generated
	 */
	public void set«javaPropertyNameFromColumn().toFirstUpper()» («javaPropertyTypeFromColumn()» val){
		«EXPAND setPropertyValueStmt_internal(javaPropertyNameFromColumn(), type) FOR type»
	}
	
	/**
	 * Legge il valore della proprieta' «javaPropertyNameFromColumn()» associata alla
	 * @generated
	 */
	public «javaPropertyTypeFromColumn()» get«javaPropertyNameFromColumn().toFirstUpper()»(){
		«EXPAND returnPropertyValueStmt_internal(javaPropertyNameFromColumn(), type) FOR type»
	}
	«ENDIF-»
	
	
«ENDDEFINE»

«REM»
«DEFINE returnPropertyValueStmt(DataAccessObject dao) FOR TableColumn»
«IF this.type.type == PrimitiveTypeCodes::DATE || this.type.type == PrimitiveTypeCodes::TIMESTAMP || this.type.type == PrimitiveTypeCodes::TIME-»
if («javaPropertyNameFromColumn()» != null){
  return new «javaPropertyTypeFromColumn()»(«javaPropertyNameFromColumn()».getTime());
}
else{
  return null;
 }
«ELSE-»
	return «javaPropertyNameFromColumn()»;
«ENDIF-»
«ENDDEFINE»

«DEFINE setPropertyValueStmt(DataAccessObject dao) FOR TableColumn»
«IF this.type.type == PrimitiveTypeCodes::DATE || this.type.type == PrimitiveTypeCodes::TIMESTAMP || this.type.type == PrimitiveTypeCodes::TIME-»
if (val != null){
  «javaPropertyNameFromColumn()» = new «javaPropertyTypeFromColumn()»(val.getTime());
}
else{
  «javaPropertyNameFromColumn()» = null;
 }
«ELSE-»
	«javaPropertyNameFromColumn()» = val;
«ENDIF-»
«ENDDEFINE»
«ENDREM»

«REM»
**************************************************
setter e getter delle property dei DTO di querydef
**************************************************
«ENDREM»

«DEFINE returnPropertyValueStmt_internal(String javaPropertyName, PrimitiveDataType type) FOR PrimitiveDataType»
«IF type.type == PrimitiveTypeCodes::DATE || type.type == PrimitiveTypeCodes::TIMESTAMP || type.type == PrimitiveTypeCodes::TIME-»
if («javaPropertyName» != null){
  return new «javaTypeFromSQLType(type)»(«javaPropertyName».getTime());
}
else{
  return null;
 }
«ELSE-»
	return «javaPropertyName»;
«ENDIF-»
«ENDDEFINE»

«DEFINE setPropertyValueStmt_internal(String javaPropertyName, PrimitiveDataType type) FOR PrimitiveDataType»
«IF type.type == PrimitiveTypeCodes::DATE || type.type == PrimitiveTypeCodes::TIMESTAMP || type.type == PrimitiveTypeCodes::TIME-»
if (val != null){
  «javaPropertyName» = new «javaTypeFromSQLType(type)»(val.getTime());
}
else{
  «javaPropertyName» = null;
 }
«ELSE-»
	«javaPropertyName» = val;
«ENDIF-»
«ENDDEFINE»


«DEFINE lookupResolverProperty FOR LookupResolver»
    /**
	 * @generated
	 */
	protected «getDtoClassName(this.supplierDAO)» «getLookedUpPropertyName()»;
	
	/**
	 * Imposta il valore della proprieta' di lookup «getLookedUpPropertyName()». 
	 * @generated
	 */
	public void set«getLookedUpPropertyName().toFirstUpper()» («getDtoClassName(this.supplierDAO)» val){
		«getLookedUpPropertyName()» = val;
	}
	
	/**
	 * Legge il valore della proprieta' di lookup «getLookedUpPropertyName()».
	 * @generated
	 */
	public «getDtoClassName(this.supplierDAO)» get«getLookedUpPropertyName().toFirstUpper()»(){
		return «getLookedUpPropertyName()»;
	}

«ENDDEFINE»




«DEFINE dtoFileCustomFinderQDef(DBAccessModel model) FOR CustomFinder»
«LET getPkgPackage((DaoPackage)(this.eContainer.eContainer.eContainer), model) AS pkgPackage-»
«FILE getDtoFullPathQdef((DataAccessObject)this.eContainer.eContainer, model , this)» package «pkgPackage».dto;

import «pkgPackage».dao.*;
import «pkgPackage».exceptions.*;
import java.io.Serializable;
import java.util.*;

/**
 * DTO specifico della query modellata nel finder «name».
 * @generated
 */
public class «getDtoCustomQdefClassName((DataAccessObject)this.eContainer.eContainer,this)»  implements Serializable {

	«EXPAND columnJavaPropertyQdef FOREACH this.queryDefinition.selectClause.columns.typeSelect(QTableColumn)»
	«EXPAND QCalculatedColumnJavaPropertyQdef FOREACH this.queryDefinition.selectClause.columns.typeSelect(QCalculatedColumn)»
	
	/**
	 * Method 'equals'
	 * 
	 * @param _other
	 * @return boolean
	 * @generated
	 */
	public boolean equals(Object _other){ 
		return super.equals(_other);
	}

	/**
	 * Method 'hashCode'
	 * 
	 * @return int
	 * @generated
	 */
	public int hashCode(){
		return super.hashCode();
	}

	

}
«ENDFILE»
«ENDLET-»
«ENDDEFINE»





«DEFINE columnJavaPropertyQdef FOR QResultColumn»
«ERROR "Non implementato per: "+this»
«ENDDEFINE»

«DEFINE columnJavaPropertyQdef FOR QTableColumn»
	
	«REM»la logica di creazione dei campi del DTO in output: se viene specificato un alias di colonna si provvede a utilizzare tale alias come nome del campo del DTO
	altrimenti, se e' specificato l'alias di tabella si provvede a usarlo come prefisso per il campo del DTO (che avra' quindi il nome della colonna nella clausola 
	di select specificata).Altrimenti si usa direttamente il nome della colonna«ENDREM»
		«IF isNullOrEmpty(this.alias)-»
			«IF isNullOrEmpty(this.qtable.aliasName)-»
			/*	 
			 * @generated
			 */
			private «javaPropertyTypeFromColumn(this.column)» «javaPropertyNameFromColumn(this.column)»;
			
			/**
			 * @generated
			 */
			public void set«javaPropertyNameFromColumn(this.column).toFirstUpper()» («javaPropertyTypeFromColumn(this.column)» val){
				«EXPAND setPropertyValueStmt_internal(javaPropertyNameFromColumn(this.column), this.column.type) FOR this.column.type»
			}
			
			/**
			 * @generated
			 */
			public «javaPropertyTypeFromColumn(this.column)» get«javaPropertyNameFromColumn(this.column).toFirstUpper()»(){
				«EXPAND returnPropertyValueStmt_internal(javaPropertyNameFromColumn(this.column), this.column.type) FOR this.column.type»
			}
			
			«ELSE»
			/*	 
			 * @generated
			 */
			private «javaPropertyTypeFromColumn(this.column)» «this.qtable.aliasName.toLowerCase()»«javaPropertyNameFromColumn(this.column).toFirstUpper()»;
			
			/**
			 * @generated
			 */
			public void set«this.qtable.aliasName.toFirstUpper()»«javaPropertyNameFromColumn(this.column).toFirstUpper()» («javaPropertyTypeFromColumn(this.column)» val){
				«EXPAND setPropertyValueStmt_internal(this.qtable.aliasName.toFirstLower()+javaPropertyNameFromColumn(this.column).toFirstUpper(), this.column.type) FOR this.column.type»
			}
			/**
			 * @generated
			 */
			public «javaPropertyTypeFromColumn(this.column)» get«this.qtable.aliasName.toFirstUpper()»«javaPropertyNameFromColumn(this.column).toFirstUpper()»(){
				«EXPAND returnPropertyValueStmt_internal(this.qtable.aliasName.toLowerCase()+javaPropertyNameFromColumn(this.column).toFirstUpper(), this.column.type) FOR this.column.type»
			}
			«ENDIF»
		«ELSE»
			/*	 
			 * @generated
			 */
			private «javaPropertyTypeFromColumn(this.column)» «this.alias.toFirstLower()»;
			
			/**
			 * @generated
			 */
			public void set«this.alias.toFirstUpper()» («javaPropertyTypeFromColumn(this.column)» val){
				«EXPAND setPropertyValueStmt_internal(this.alias, this.column.type) FOR this.column.type»
			}
			/**
			 * @generated
			 */
			public «javaPropertyTypeFromColumn(this.column)» get«this.alias.toFirstUpper()»(){
				«EXPAND returnPropertyValueStmt_internal(this.alias, this.column.type) FOR this.column.type»
			}
		«ENDIF»
«ENDDEFINE»


«DEFINE QCalculatedColumnJavaPropertyQdef FOR QCalculatedColumn»
		    
		/**	 
		* @generated
		*/
		private «javaTypeFromSQLType(this.calculatedType)» «this.alias.toFirstLower()»;
			
		/**
		* @generated
		*/
		public void set«this.alias.toFirstUpper()» («javaTypeFromSQLType(this.calculatedType)» val){
			«EXPAND setPropertyValueStmt_internal(this.alias, this.calculatedType) FOR this.calculatedType»
		}
		/**
		* @generated
		*/
		public «javaTypeFromSQLType(this.calculatedType)» get«this.alias.toFirstUpper()»(){
			«EXPAND returnPropertyValueStmt_internal(this.alias, this.calculatedType) FOR this.calculatedType»
		}
			
«ENDDEFINE»

